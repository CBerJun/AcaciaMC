#* _math: Internal module used by builtin `math` module *#

def mod(x: int, y: int) -> int:
    #**
     * Python-style modulo operator.
     * 10 % 3 == mod(10, 3) == 1
     * 10 % -3 == 1 while mod(10, -3) == -2
     * -10 % 3 == -1 while mod(-10, 3) == 2
     * -10 % -3 == mod(-10, -3) == -1
     *#
    result (x % y + y) % y

def floordiv(x: int, y: int) -> int:
    #**
     * Return largest integer less than or equal to `x` divided by `y`.
     * This is Python-style floor division, while `/` operator is
     * C-style integer division (which rounds towards zero).
     *#
    res := x / y
    if (x >= 0) != (y >= 0) and x % y != 0:
        res -= 1
    result res

def pow(x: int, y: int) -> int:
    #**
     * Return `x` to the power of `y`.
     * The behavior is undefined when `y` is negative
     * (in this implementation this causes infinite loop).
     * 0 to the power of 0 returns 1.
     *#
    if y == 0:
        result 1
    else:
        t := 1
        while y != 1:
            if y % 2 == 1:
                t *= x
            x *= x
            y /= 2
        result x * t
