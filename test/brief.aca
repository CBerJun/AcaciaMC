#*
 * General test file for Acacia
 * This file gives you a brief picture of Acacia,
 * while itself is a legal Acacia program.
 *
 * Compile this with:
 *   cd path/to/acacia
 *   python3 main.py -d test/brief.aca
 * "-d" is to show the debugging comments in output files.
 *
 * It can be interpreted using Python (version above 3.3)
 * No third-party package is required.
 *#

#* Variables *#
# Define a variable `x` and assign 10 to it
x = 10
# Following `+` operator should be calculated during compile time
# `0x` and `0b` can be used to refer to hexadecimal and binary number
x = 0XF2e + 0b11 # `int` type
y = True # `bool` type

#* Fancy operators *#
number = (x % -2) * (x + 3)
boolean = y and (x > 10) or (x < 0)

#* Macro defining (aka. Binding) *#
scoreboard -> "scb"
# The following occurances of `scoreboard` all refers to `"scb"`
player -> "@a[tag=player]"

#* Control statements *#
## If statement
if x > 5:
    x *= 2
# `x` will be doubled only when it's larger than 5

## While statement
sum = 0
while x > 0:
    sum += x
    x -= 1
# Sum up numbers from 1 to `x`
# IMPORTANT NOTICE: Loops are implemented through recursion, which runs
# a lot of commands. Minecraft limits the amount of commands that one
# function could trigger to 10000. Be careful when using loops.

#* Compatible with the original command system *#
## Accessing scoreboards
# "|" selector ":" objective "|" is referring to selector's score on objective
x = |"@p": "score"| + 10
|"CBerJun": scoreboard| = 3
x = |player: "data"|

## Accessing Raw Command
/say Hello, world!
# Using macros with commands
/tp ${player} 11 45 14
/scoreboard players add ${player} ${scoreboard} 10
/*
tellraw @a {"rawtext":[
    {"text": "Hello "},
    {"text": "world!"}
]}
*/

#* Great builtin modules! *#
#*
 * The builtin modules are actually seperated from the compiler itself,
 * which means: everyone can create their own Acacia module!
 * These builtin modules are written in Python at acaciamc/modules
 *#
# To indicate that you are using `print` module
import print
# Tell every players "Hello world!"
print.tell("Hello world!", "@a")
# Show title "Chapter I" on the nearest player's screen, for 10 seconds
print.title("Chapter I", "@p", stay_time=200)
# Show everyone the value of `x` in the form of "Value of X: ..." above actionbar
print.title(print.format("Value of X: %0", x), mode=print.ACTIONBAR)
# Introduction to other builtin modules can be found in test/module.aca
# Not only these modules written in Python are supported, Acacia code
# can be imported by other Acacia programs. See test/module.aca

#* Functions *#
# Type of argument or its default value must be specified
def max(a: int, b = int.MAX) -> int:
                    # int.MAX is referring to 2147483647
    #* Return the larger one between a and b *#
    if a >= b:
        result a
        # Unlike "return" in modern languages like Python,
        # result statements do not stop functions!
    else:
        result b

def is_larger(a: int, b: int) -> bool:
    #* Return whether a is larger than b *#
    result a > b

if not is_larger(x, 4):
    x = 2
# Comments and empty lines does not affect parsing an indented block
    x = 1 + max(x, 10)
# This Elif statement is optimized (1 < 10 is always True)
elif 1 < 10:
    x = 100
else:
    pass # Empty block

#* Exported interfaces *#
# These interfaces are exported for later use in Minecraft
interface a:
    # Local variables are unreachable outside scope
    local = 20 < x <= 100 # Chained comparison operators!
    # Do something...
# Now we can use the `a` interface in Minecraft through /function
# command (when using default compile options, it is stored at
# acacia/interface/a.mcfunction)

# The following is generated at acacia/interface/b/c.mcfunction
interface b.c:
    /say b.c called

#* Line continuation using backslash *#
x = \
    10 + int(y)
    # convert bool to int, also referring to the builtin integer type

# ENJOY!!!
